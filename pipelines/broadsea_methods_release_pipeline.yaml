# Simple pipeline for demonstrating achilles and synthea-etl via ohdsi/broadsea-methods container
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - achilles
    - pipeline/achilles_pipeline.yaml

parameters:
# Script Settings
- name: SourceFolder
  type: string
  default: apps/broadsea-methods
  displayName: Source Folder with Achilles script (e.g. apps/broadsea-methods)

# Synthea Settings
- name: runETL
  displayName: Run ETL-Synthea
  type: boolean
  default: true
- name: populationSize
  displayName: Synthea Live Population Size
  type: number
  default: 100
- name: SyntheaETLScriptFileName
  type: string
  default: synthea-etl.R
  displayName: Synthea ETL script file name (e.g. synthea-etl.R)
- name: SyntheaETLSmokeTestScriptFileName
  type: string
  default: synthea-etl-test.R
  displayName: Synthea ETL smoke test script file name (e.g. synthea-etl-test.R)

# Achilles Settings
- name: runAchilles
  displayName: Run Achilles Characterization
  type: boolean
  default: true
- name: AchillesScriptFileName
  type: string
  default: achilles.R
  displayName: Achilles script file name (e.g. achilles.R)
- name: AchillesSmokeTestScriptFileName
  type: string
  default: achilles-test.R
  displayName: Achilles smoke test script file name (e.g. achilles-test.R)
# TODO: move to variables.yaml

# Docker Settings
- name: dockerBuildImageName
  type: string
  default: achilles-synthea-etl
  displayName: Image Name (e.g. achilles-synthea-etl) to pull from ACR.  Defaults to empty.
- name: dockerBuildImageTag
  type: string
  default: latest
  displayName: Image Tag (e.g. latest) to pull from ACR.  Defaults to empty.

variables:
  - template: variables.yaml
  - name: populationSize
    value: ${{ parameters.populationSize }}
  - name: "RunETL"
    value: ${{ parameters.runETL }}
  - name: "RunAchilles"
    value: ${{ parameters.runAchilles }}
  - name: acrImageTag
    value: "${{ variables.containerRegistry }}.azurecr.io/${{ parameters.dockerBuildImageName }}:${{ parameters.dockerBuildImageTag }}"
  - name: syntheaETLScriptPath
    value: "${{ parameters.SyntheaETLScriptFileName }}"
  - name: syntheaETLSmokeTestScriptFileName
    value: "${{ parameters.SyntheaETLSmokeTestScriptFileName }}"
  - name: achillesScriptPath
    value: "${{ parameters.SourceFolder }}/${{ parameters.AchillesScriptFileName }}"
  - name: achillesSmokeTestScriptFileName
    value: "${{ parameters.SourceFolder }}/${{ parameters.AchillesSmokeTestScriptFileName }}"

pool: 'Linux-VMSS-Pool' # attempt to run with Linux VMSS

steps:
- task: AzureCLI@2
  displayName: Download Synthea ETL Docker Image
  inputs:
    azureSubscription: ${{ variables.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      az acr login -n "${{ variables.containerRegistry }}"

      # test to see the list of images in ACR.
      az acr repository list -n "${{ variables.containerRegistry }}"

      TOKEN=$(az acr login --name "${{ variables.containerRegistry }}" --expose-token --output tsv --query accessToken)

      sudo docker login ${{ variables.containerRegistry }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN

      echo "docker pull ${{ variables.acrImageTag }}"
      sudo docker pull "${{ variables.acrImageTag }}"

- ${{ if eq(variables.RunETL, 'true') }}:
  - script: |
      sudo apt install openjdk-11-jdk -y
      java -version

      cd ${{ parameters.SourceFolder }}
      wget https://github.com/synthetichealth/synthea/releases/download/v$(syntheaVersion)/synthea-with-dependencies.jar

      echo "Generating Synthea data with living population size: $(populationSize)"
      echo java -jar synthea-with-dependencies.jar -p $(populationSize) -c synthea-settings.conf
      java -jar synthea-with-dependencies.jar -p $(populationSize) -c synthea-settings.conf

      echo "----------LIST SYNTHEA CSVs------------"
      ls
      cd synthea_data
      ls
      cd csv
      ls
      echo "----------CSV PATH------------"
      pwd
    displayName: Download Synthea Release & Generate Data

  - task: AzureCLI@2
    displayName: Run ETL
    inputs:
      azureSubscription: ${{ variables.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # test to see the list of images in ACR.
        az acr repository list -n "${{ variables.containerRegistry }}"

        TOKEN=$(az acr login --name "${{ variables.containerRegistry }}" --expose-token --output tsv --query accessToken)

        sudo docker login ${{ variables.containerRegistry }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN

        # Check Azure SQL Access

        echo '****************Checking without private link resolution******************'
        echo 'nslookup "${{ variables.sqlServerName }}.database.windows.net"'
        nslookup "${{ variables.sqlServerName }}.database.windows.net"

        echo "*****************Performing ETL Operation******************"
        # TODO: Check MI Login into Azure SQL?
        # Include the source folder to pick up synthea settings
        echo "docker run -t --rm -v "$PWD/${{ parameters.SourceFolder }}":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e SQL_DATABASE_NAME=$SQL_DATABASE_NAME \
        -e CDM_SCHEMA=$CDM_SCHEMA -e CDM_VERSION=$CDM_VERSION -e SYNTHEA_SCHEMA=$SYNTHEA_SCHEMA -e SYNTHEA_VERSION=$SYNTHEA_VERSION \
        -e SYNTHEA_PATH=$SYNTHEA_PATH -e VOCAB_PATH=$VOCAB_PATH ${{ variables.acrImageTag }} Rscript ${{ variables.syntheaETLScriptPath }}"

        sudo docker run -t --rm -v "$PWD/${{ parameters.SourceFolder }}":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e SQL_DATABASE_NAME=$SQL_DATABASE_NAME \
        -e CDM_SCHEMA=$CDM_SCHEMA -e CDM_VERSION=$CDM_VERSION -e SYNTHEA_SCHEMA=$SYNTHEA_SCHEMA -e SYNTHEA_VERSION=$SYNTHEA_VERSION \
        -e SYNTHEA_PATH=$SYNTHEA_PATH -e VOCAB_PATH=$VOCAB_PATH "${{ variables.acrImageTag }}" Rscript ${{ variables.syntheaETLScriptPath }}
    env:
      CDM_SCHEMA: $(cdmSchema)
      CDM_VERSION: $(cdmVersion)
      SYNTHEA_SCHEMA: $(syntheaSchema)
      SYNTHEA_PATH: '/home/docker/synthea_data/csv/'
      SYNTHEA_VERSION: $(syntheaVersion)
      VOCAB_PATH: '/home/docker/vocab_files'
      SQL_SERVER_NAME: $(sqlServerName)
      SQL_DATABASE_NAME: $(sqlServerDbName)

  - task: AzureCLI@2
    displayName: 'Smoke Test - Validate Synthetic Data'
    inputs:
      azureSubscription: ${{ variables.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # test to see the list of images in ACR.
        az acr repository list -n "${{ variables.containerRegistry }}"

        TOKEN=$(az acr login --name "${{ variables.containerRegistry }}" --expose-token --output tsv --query accessToken)

        sudo docker login ${{ variables.containerRegistry }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN
        echo "Smoke Test"

        # Include the source folder to pick up synthea settings
        echo "docker run -t --rm -v "$PWD/${{ parameters.SourceFolder }}":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e $SQL_DATABASE_NAME ${{ variables.acrImageTag }} Rscript ${{ variables.syntheaETLSmokeTestScriptFileName }}"

        sudo docker run -t --rm -v "$PWD/${{ parameters.SourceFolder }}":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e SQL_DATABASE_NAME=$SQL_DATABASE_NAME "${{ variables.acrImageTag }}" Rscript ${{ variables.syntheaETLSmokeTestScriptFileName }}
    env:
      SQL_SERVER_NAME: $(sqlServerName)
      SQL_DATABASE_NAME: $(sqlServerDbName)

- ${{ if eq(variables.RunAchilles, 'true') }}:
  - task: AzureCLI@2
    displayName: 'Run Achilles characterization on omop db via Docker container'
    inputs:
      azureSubscription: ${{ variables.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az acr login -n "${{ variables.containerRegistry }}"

        # test to see the list of images in ACR.
        az acr repository list -n "${{ variables.containerRegistry }}"

        TOKEN=$(az acr login --name "${{ variables.containerRegistry }}" --expose-token --output tsv --query accessToken)
        
        # Check Azure SQL Access

        echo '****************Checking without private link resolution******************'
        echo 'nslookup "${{ variables.sqlServerName }}.database.windows.net"'
        nslookup "${{ variables.sqlServerName }}.database.windows.net"

        # TODO: Check MI Login into Azure SQL?
        sudo docker login ${{ variables.containerRegistry }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN
        echo "docker run -t --rm -v "$PWD":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e SQL_DATABASE_NAME=$SQL_DATABASE_NAME -e CDM_SCHEMA=$CDM_SCHEMA \
        -e RESULTS_SCHEMA=$RESULTS_SCHEMA -e VOCAB_SCHEMA=$VOCAB_SCHEMA -e SOURCE_NAME="$SOURCE_NAME" -e NUM_THREADS=$NUM_THREADS \
        ${{ variables.containerRegistry }}.azurecr.io/${{ parameters.dockerBuildImageName }}:${{ parameters.dockerBuildImageTag }} Rscript ${{ variables.achillesScriptPath}}"

        sudo docker run -t --rm -v "$PWD":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e SQL_DATABASE_NAME=$SQL_DATABASE_NAME -e CDM_SCHEMA=$CDM_SCHEMA \
        -e RESULTS_SCHEMA=$RESULTS_SCHEMA -e VOCAB_SCHEMA=$VOCAB_SCHEMA -e SOURCE_NAME="$SOURCE_NAME" -e NUM_THREADS=$NUM_THREADS \
        "${{ variables.containerRegistry }}.azurecr.io/${{ parameters.dockerBuildImageName }}:${{ parameters.dockerBuildImageTag }}" Rscript "${{ variables.achillesScriptPath}}"

        # check for errors
        ls errorReportSql.txt
        cat errorReportSql.txt
    env:
      SQL_SERVER_NAME: $(sqlServerName)
      SQL_DATABASE_NAME: $(sqlServerDbName)
      CDM_SCHEMA: $(cdmSchema)
      RESULTS_SCHEMA: $(resultsSchema)
      VOCAB_SCHEMA: $(vocabSchema)
      SOURCE_NAME: "OHDSI CDM V5 Database"
      NUM_THREADS: 1
  
  - task: AzureCLI@2
    displayName: 'Smoke Test - Validate Achilles Characterization'
    inputs:
      azureSubscription: ${{ variables.serviceConnection }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        # test to see the list of images in ACR.
        az acr repository list -n "${{ variables.containerRegistry }}"

        TOKEN=$(az acr login --name "${{ variables.containerRegistry }}" --expose-token --output tsv --query accessToken)

        sudo docker login ${{ variables.containerRegistry }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN
        echo "Smoke Test"

        echo "docker run -t --rm -v "$PWD":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e $SQL_DATABASE_NAME ${{ variables.containerRegistry }}.azurecr.io/${{ parameters.dockerBuildImageName }}:${{ parameters.dockerBuildImageTag }} Rscript ${{ variables.achillesSmokeTestScriptFileName}}"

        sudo docker run -t --rm -v "$PWD":/home/docker -w /home/docker \
        -e SQL_SERVER_NAME=$SQL_SERVER_NAME -e SQL_DATABASE_NAME=$SQL_DATABASE_NAME "${{ variables.containerRegistry }}.azurecr.io/${{ parameters.dockerBuildImageName }}:${{ parameters.dockerBuildImageTag }}" Rscript "${{ variables.achillesSmokeTestScriptFileName}}"
    env:
      SQL_SERVER_NAME: $(sqlServerName)
      SQL_DATABASE_NAME: $(sqlServerDbName)
  
  - bash: |
      cd /home/azureuser/agent/_work/
      sudo find . -type d -name 'output' -exec rm -rf {} +
    displayName: 'Delete Achilles Files'
  
- task: DeleteFiles@1
  displayName: Clean Up Working Dir
  condition: always()
  inputs:
    SourceFolder: '$(Agent.BuildDirectory)'
    Contents: '*'
