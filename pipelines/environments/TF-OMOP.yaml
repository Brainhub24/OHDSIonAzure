# Terraform release pipeline for environment
# TODO update resource group in .tfvars
parameters: 
# this should come from /infra/terraform/bootstrap
- name: bootstrapVariableGroupName
  type: string
  displayName: Variable Group Name with Key Vault Link
  default: ado-sharing-dev-omop-bootstrap-vg
  values:
  - ado-omop-bootstrap-vg
  - ado-sharing-prod-omop-bootstrap-vg
  - ado-sharing-stage-omop-bootstrap-vg
  - ado-sharing-qa-omop-bootstrap-vg
  - ado-sharing-dev-omop-bootstrap-vg
- name: overrideBranchBootstrapVariableGroupName
  type: boolean
  default: false
  displayName: Use the parameter value for bootstrapVariableGroupName for the variable group name instead of relying on the branch name to derive the variable group
  values:
  - true
  - false

- name: bootstrapSettingsVariableGroupName
  type: string
  displayName: Variable Group Name with Bootstrap Settings (no Key Vault)
  default: ado-sharing-dev-omop-bootstrap-settings-vg
  values:
  - ado-omop-bootstrap-settings-vg
  - ado-sharing-prod-omop-bootstrap-settings-vg
  - ado-sharing-stage-omop-bootstrap-settings-vg
  - ado-sharing-qa-omop-bootstrap-settings-vg
  - ado-sharing-dev-omop-bootstrap-settings-vg
- name: overrideBranchBootstrapSettingsVariableGroupName
  type: boolean
  default: false
  displayName: Use the parameter value for bootstrapSettingsVariableGroupName for the variable group name instead of relying on the branch name to derive the variable group
  values:
  - true
  - false

variables:
- ${{ if eq(parameters['overrideBranchBootstrapVariableGroupName'], true) }}:
  - group: ${{ parameters.bootstrapVariableGroupName }}
- ${{ elseif eq(variables['Build.SourceBranchName'], 'master') }}:
  - group: ado-sharing-prod-omop-bootstrap-vg
- ${{ elseif eq(variables['Build.SourceBranchName'], 'stage') }}:
  - group: ado-sharing-stage-omop-bootstrap-vg
- ${{ elseif eq(variables['Build.SourceBranchName'], 'qa') }}:
  - group: ado-sharing-qa-omop-bootstrap-vg
- ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
  - group: ado-sharing-dev-omop-bootstrap-vg
- ${{ else }}:
  - group: ado-sharing-dev-omop-bootstrap-vg

- ${{ if eq(parameters['overrideBranchBootstrapSettingsVariableGroupName'], true) }}:
  - group: ${{ parameters.bootstrapSettingsVariableGroupName }}
- ${{ elseif eq(variables['Build.SourceBranchName'], 'master') }}:
  - group: ado-sharing-prod-omop-bootstrap-settings-vg
- ${{ elseif eq(variables['Build.SourceBranchName'], 'stage') }}:
  - group: ado-sharing-stage-omop-bootstrap-settings-vg
- ${{ elseif eq(variables['Build.SourceBranchName'], 'qa') }}:
  - group: ado-sharing-qa-omop-bootstrap-settings-vg
- ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
  - group: ado-sharing-dev-omop-bootstrap-settings-vg
- ${{ else }}:
  - group: ado-sharing-dev-omop-bootstrap-settings-vg
- name: tf_directory
  value: 'infra/terraform/omop'
- name: terraform_version
  value: '1.1.4'
- name: pool
  value: 'Azure Pipelines'

# Environment settings should come from bootstrap VG setup through bootstrap TF
- name: tf_init_command_options
  value: '-input=false'
- name: tf_validate_command_options
  value: ''
- name: tf_refresh_command_options
  value: '-input=false -lock=false -var="omop_password=$(omopPassword)" -var="bootstrap_admin_object_id=$(bootstrapAdminObjectId)" -var="sp_service_connection_object_id=$(spServiceConnectionObjectId)" -var="vmss_managed_identity_object_id=$(vmssManagedIdentityObjectId)" -var="ad_admin_login_name=$(ad_admin_login_name)" -var="ad_admin_object_id=$(ad_admin_object_id)"'
- name: tf_plan_command_options
  value: '-input=false -lock=false -refresh=false -out plan.out -var="omop_password=$(omopPassword)" -var="bootstrap_admin_object_id=$(bootstrapAdminObjectId)" -var="sp_service_connection_object_id=$(spServiceConnectionObjectId)" -var="vmss_managed_identity_object_id=$(vmssManagedIdentityObjectId)" -var="ad_admin_login_name=$(ad_admin_login_name)" -var="ad_admin_object_id=$(ad_admin_object_id)"'
- name: tf_apply_command_options
  value: '-input=false -refresh=false -var="omop_password=$(omopPassword)" -var="bootstrap_admin_object_id=$(bootstrapAdminObjectId)" -var="sp_service_connection_object_id=$(spServiceConnectionObjectId)" -var="vmss_managed_identity_object_id=$(vmssManagedIdentityObjectId)" -var="ad_admin_login_name=$(ad_admin_login_name)" -var="ad_admin_object_id=$(ad_admin_object_id)"'

# Disable CI Triggers
trigger: none

# Release instructions
stages:
- stage: Terraform_Plan
  jobs:
  - deployment: Terraform_Plan
    displayName: Terraform Plan
    pool: $(pool)
    workspace:
      clean: all
    continueOnError: 'false'
    # Azure DevOps environment should be setup through bootstrap TF and come from your bootstrap-settings-vg
    environment: $(tf_plan_environment)
    strategy:
      runOnce:
        deploy:
          steps:
            - template: ../templates/terraform/tf_plan.yml
              parameters:
                # The service connection should be setup as part for your bootstrap terraform and come from your bootstrap-settings-vg
                service_connection: '$(azure_service_connection_name)'
                tf_directory: ${{ variables.tf_directory }}
                tf_version: ${{ variables.terraform_version }}
                tf_init_command_options: ${{ variables.tf_init_command_options }}
                tf_validate_command_options: ${{ variables.tf_validate_command_options }}
                tf_refresh_command_options: ${{ variables.tf_refresh_command_options }}
                tf_plan_command_options: ${{ variables.tf_plan_command_options }}
                # TF backend container settings should be available through your bootstrap terraform and come from your bootstrap-settings-vg
                tf_storage_resource_group: '$(tf_storage_resource_group)'
                tf_storage_region: '$(tf_storage_region)'
                tf_storage_account_name: '$(tf_storage_account_name)'
                tf_storage_container_name: '$(tf_storage_container_name)'
                tf_state_filename: '$(tf_state_filename)'


- stage: Approved_Terraform
  dependsOn:
    - Terraform_Plan # Explicitly set dependency graph

  # Conditions
  # 1. If TF Plan succeeded
  # 2. If build reason isn't a pull request

  condition: |
    and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest')
    )

  jobs:
  - deployment: Approved_Terraform
    displayName: Approved Terraform
    pool: $(pool)
    workspace:
      clean: all
    continueOnError: 'false'
    # Azure DevOps environment should be setup through bootstrap TF and come from your bootstrap-settings-vg
    environment: $(tf_approval_environment)
    strategy:
      runOnce:
        deploy:
          steps:
          # TODO point to higher environment path for higher environments
            - template: ../templates/terraform/tf_apply.yml
              parameters:
                # The service connection should be setup as part for your bootstrap terraform and come from your bootstrap-settings-vg
                service_connection: '$(azure_service_connection_name)'
                tf_directory: ${{ variables.tf_directory }}
                tf_version: ${{ variables.terraform_version }}
                tf_init_command_options: ${{ variables.tf_init_command_options }}
                tf_validate_command_options: ${{ variables.tf_validate_command_options }}
                tf_refresh_command_options: ${{ variables.tf_refresh_command_options }}
                tf_apply_command_options: ${{ variables.tf_apply_command_options }}
                # TF backend container settings should be available through your bootstrap terraform and come from your bootstrap-settings-vg
                tf_storage_resource_group: '$(tf_storage_resource_group)'
                tf_storage_region: '$(tf_storage_region)'
                tf_storage_account_name: '$(tf_storage_account_name)'
                tf_storage_container_name: '$(tf_storage_container_name)'
                tf_state_filename: '$(tf_state_filename)'