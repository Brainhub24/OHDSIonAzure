# Pipeline to build and publish vocabulary pipeline artifacts used to populate an OMOP CDM database.
trigger: none

parameters:
# this should come from /infra/terraform/bootstrap
- name: envVariableGroupName
  type: string
  displayName: Variable Group Name with Environment Settings
  default: sharing-dev-omop-env-vg
  values:
  - sharing-prod-omop-env-vg
  - sharing-stage-omop-env-vg
  - sharing-qa-omop-env-vg
  - sharing-dev-omop-env-vg
- name: overrideBranchEnvVariableGroupName
  type: boolean
  default: false
  displayName: Use the parameter value for envVariableGroupName for the variable group name instead of relying on the branch name to derive the variable group
  values:
  - true
  - false

- name: buildConfiguration
  type: string
  default: Release
  displayName: Build Configuration for Dacpac
  values:
  - Dev
  - Release

- name: cdmVersion
  type: string
  default: v5.3.1
  displayName: Common Data Model Configuration for Dacpac Build
  values:
  - v5.3.1
  
- name: sourceFolder
  type: string
  default: sql
  displayName: Source folder for scripts (e.g. for sql/scripts use sql)

# Post TF Deploy Parameters
- name: buildArtifactFolderPathPostTFDeploy
  type: string
  default: vocab/posttfdeploy
  displayName: Build Artifact Folder Path for post TF Script
  values:
  - vocab/posttfdeploy
- name: buildArtifactNamePostTFDeploy
  type: string
  default: PostTFDeployScript
  displayName: Build Artifact Name for post TF Script
  values:
  - PostTFDeployScript
- name: scriptFileNamePostTFDeploy
  type: string
  default: Post_TF_Deploy.sql
  displayName: Post TF Deploy Script file name (e.g. Post_TF_Deploy.sql)

# Vocabulary DDL Parameters
- name: buildArtifactFolderPathVocabularyDDL
  type: string
  default: vocab/ddl
  displayName: Build Artifact Folder Path for Vocabulary DDL Script
  values:
  - vocab/ddl
- name: buildArtifactNameVocabularyDDL
  type: string
  default: VocabularyDDLDacpac
  displayName: Build Artifact Name for Vocabulary DDL Dacpac
  values:
  - VocabularyDDLDacpac
- name: sourceFileNameVocabularyDDL
  type: string
  default: OMOP_Vocabulary_DDL.sqlproj
  displayName: SQLProj file name (e.g. OMOP_Vocabulary_DDL.sqlproj)
- name: sourceProjectFolderNameVocabularyDDL
  type: string
  default: OMOP_Vocabulary_DDL
  displayName: SQLProj file will use a project folder (e.g. OMOP_Vocabulary_DDL.sqlproj can point to OMOP_Vocabulary_DDL)
- name: dacpacFileNameVocabularyDDL
  type: string
  default: OMOP_Vocabulary_DDL.dacpac
  displayName: OMOP CDM DDL Dacpac file name (e.g. OMOP_Vocabulary_DDL.dacpac)

# Vocabulary Indexes and Constraints Parameters
- name: buildArtifactFolderPathVocabularyIndexesConstraints
  type: string
  default: vocab/indexesconstraints
  displayName: Build Artifact Folder Path for Vocabulary Indexes Constraints Dacpac
  values:
  - vocab/indexesconstraints
- name: buildArtifactNameVocabularyIndexesConstraints
  type: string
  default: VocabularyIndexesConstraintsDacpac
  displayName: Build Artifact Name for Vocabulary Indexes Dacpac
  values:
  - VocabularyIndexesConstraintsDacpac
- name: sourceFileNameVocabularyIndexesConstraints
  type: string
  default: OMOP_Vocabulary_Indexes_Constraints.sqlproj
  displayName: SQLProj file name (e.g. for OMOP_Vocabulary_Indexes_Constraints.sqlproj)
- name: sourceProjectFolderNameVocabularyIndexesConstraints
  type: string
  default: OMOP_Vocabulary_Indexes_Constraints
  displayName: SQLProj file will use a project folder (e.g. OMOP_Vocabulary_Indexes_Constraints.sqlproj can point to OMOP_Vocabulary_Indexes_Constraints)
- name: dacpacFileNameVocabularyIndexesConstraints
  type: string
  default: OMOP_Vocabulary_Indexes_Constraints.dacpac
  displayName: OMOP CDM Indexes and Constraints Dacpac file name (e.g. OMOP_Vocabulary_Indexes_Constraints.dacpac)

pool:
  name: 'Azure Pipelines'
  demands: 'msbuild'
  vmImage: 'windows-latest'

variables:
  - ${{ if eq(parameters['overrideBranchEnvVariableGroupName'], true) }}:
    - group: ${{ parameters.envVariableGroupName }}
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'master') }}:
    - group: sharing-prod-omop-env-vg
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'stage') }}:
    - group: sharing-stage-omop-env-vg
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'qa') }}:
    - group: sharing-qa-omop-env-vg
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
    - group: sharing-dev-omop-env-vg
  - ${{ else }}:
    - group: sharing-dev-omop-env-vg

steps:
# publish the post tf deploy script
- template: templates/copy_and_publish_file.yml
  parameters:
    sourceFolder: '${{ parameters.sourceFolder }}/scripts/'
    targetFolder: '${{ parameters.buildConfiguration }}'
    fileName: ${{ parameters.scriptFileNamePostTFDeploy }}
    buildArtifactFolderPath: ${{ parameters.buildArtifactFolderPathPostTFDeploy }}
    buildArtifactName: ${{ parameters.buildArtifactNamePostTFDeploy }}

# Build Vocabulary DDL Dacpac
- template: templates/build_and_publish_dacpac_artifact.yml
  parameters:
    sourceFolder: '${{ parameters.sourceFolder }}/CDM/${{ parameters.cdmVersion }}'
    sourceProjectFolderName: '${{ parameters.sourceProjectFolderNameVocabularyDDL }}'
    targetFolder: '${{ parameters.buildConfiguration }}'
    sourceFileName: ${{ parameters.sourceFileNameVocabularyDDL }}
    targetFileName: ${{ parameters.dacpacFileNameVocabularyDDL }}
    buildConfiguration: '${{ parameters.buildConfiguration }}'
    buildArtifactFolderPath: ${{ parameters.buildArtifactFolderPathVocabularyDDL }}
    buildArtifactName: ${{ parameters.buildArtifactNameVocabularyDDL }}

# Build Vocabulary Indexes and Constraints Dacpac
- template: templates/build_and_publish_dacpac_artifact.yml
  parameters:
    sourceFolder: '${{ parameters.sourceFolder }}/CDM/${{ parameters.cdmVersion }}'
    sourceProjectFolderName: '${{ parameters.sourceProjectFolderNameVocabularyIndexesConstraints }}'
    targetFolder: '${{ parameters.buildConfiguration }}'
    sourceFileName: ${{ parameters.sourceFileNameVocabularyIndexesConstraints }}
    targetFileName: ${{ parameters.dacpacFileNameVocabularyIndexesConstraints }}
    buildConfiguration: '${{ parameters.buildConfiguration }}'
    buildArtifactFolderPath: ${{ parameters.buildArtifactFolderPathVocabularyIndexesConstraints }}
    buildArtifactName: ${{ parameters.buildArtifactNameVocabularyIndexesConstraints }}
